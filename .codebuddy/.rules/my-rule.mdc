# 天气预报应用项目规则

## 1. 代码规范

### 1.1 命名规范
- **类名**：使用大驼峰命名法（PascalCase），如 `WeatherService`、`HomeScreen`
- **变量和方法**：使用小驼峰命名法（camelCase），如 `weatherData`、`fetchWeatherByCity`
- **常量**：使用下划线分隔的大写字母，如 `APP_TITLE`，或在类中使用 `static const`
- **私有成员**：使用下划线前缀，如 `_weatherData`、`_isLoading`
- **文件名**：使用小写字母和下划线，如 `weather_service.dart`、`home_screen.dart`

### 1.2 代码格式
- 使用2个空格缩进
- 大括号使用 K&R 风格（左括号不换行）
- 每行代码不超过80个字符，超过时进行适当换行
- 使用 `dartfmt` 或 IDE 的格式化工具保持代码格式一致

### 1.3 注释规范
- 为公共API提供文档注释（使用 `///`）
- 复杂逻辑需添加适当的注释说明
- TODO注释使用格式：`// TODO: 说明内容`
- 避免无意义或过时的注释

### 1.4 异常处理
- 使用 try-catch 块捕获可能的异常
- 在异常处理中提供有意义的错误信息
- 使用 Future 的 catchError 或 try-catch 处理异步操作的异常

### 1.5 空安全
- 充分利用Dart的空安全特性
- 使用 `?` 标记可空类型，如 `String?`
- 使用 `!` 操作符时需确保变量非空
- 优先使用条件访问操作符 `?.` 和空合并操作符 `??`

## 2. 项目架构

### 2.1 整体架构
项目采用基于Provider的状态管理架构，遵循MVVM（Model-View-ViewModel）模式：
- **Model**：数据模型，如 `WeatherModel`
- **View**：UI界面，如 `HomeScreen`、各种Widget
- **ViewModel**：业务逻辑和状态管理，如 `WeatherProvider`、`SettingsProvider`

### 2.2 依赖注入
- 使用Provider包进行依赖注入和状态管理
- 在应用顶层使用 `MultiProvider` 提供全局状态
- 使用 `Consumer` 或 `Provider.of` 在Widget中获取状态

### 2.3 服务层
- 服务类负责与外部系统交互，如API调用、本地存储等
- 服务类应该是无状态的，只提供功能方法
- 主要服务包括：`WeatherService`、`LocationService`、`AdService`

### 2.4 国际化
- 使用 `AppLocalizations` 类管理多语言支持
- 所有用户可见的文本都应通过国际化系统提供
- 支持英文和中文两种语言

## 3. 项目目录结构

```
lib/
├── l10n/                  # 国际化相关
│   ├── app_en.dart        # 英文语言文件
│   ├── app_localizations.dart # 国际化管理类
│   └── app_zh.dart        # 中文语言文件
├── main.dart              # 应用入口
├── models/                # 数据模型
│   └── weather_model.dart # 天气数据模型
├── providers/             # 状态管理
│   ├── settings_provider.dart # 设置状态管理
│   └── weather_provider.dart  # 天气数据状态管理
├── screens/               # 页面
│   ├── city_search_screen.dart # 城市搜索页面
│   ├── home_screen.dart   # 主页面
│   └── settings_screen.dart    # 设置页面
├── services/              # 服务
│   ├── ad_service.dart    # 广告服务
│   ├── location_service.dart   # 位置服务
│   └── weather_service.dart    # 天气API服务
├── utils/                 # 工具类
│   ├── animation_utils.dart    # 动画工具
│   ├── date_formatter.dart     # 日期格式化工具
│   └── weather_icons.dart      # 天气图标工具
└── widgets/               # UI组件
    ├── current_weather.dart    # 当前天气组件
    ├── daily_forecast.dart     # 每日预报组件
    ├── hourly_forecast.dart    # 小时预报组件
    └── weather_details.dart    # 天气详情组件
```

## 4. 项目核心功能

### 4.1 天气数据获取与展示
- 通过 `WeatherService` 从 wttr.in API 获取天气数据
- 支持通过城市名称和地理坐标获取天气
- 展示当前天气、小时预报和每日预报
- 提供详细的天气信息（温度、湿度、风速等）

### 4.2 位置服务
- 通过 `LocationService` 获取用户当前位置
- 处理位置权限请求和错误情况
- 基于位置获取本地天气信息

### 4.3 多语言支持
- 支持英文和中文两种语言
- 通过 `AppLocalizations` 管理语言切换
- 使用 `SharedPreferences` 保存语言设置

### 4.4 设置管理
- 支持语言切换
- 支持天气更新频率设置
- 支持天气提醒开关
- 设置通过 `SharedPreferences` 持久化

### 4.5 高级会员功能
- 通过观看广告获取7天高级会员资格
- 会员状态通过 `SharedPreferences` 持久化
- 会员用户可以享受无广告体验

## 5. 业务流程

### 5.1 应用启动流程
1. 初始化应用（`main.dart`）
2. 加载语言设置（`AppLocalizations.init()`）
3. 初始化Provider（`WeatherProvider`、`SettingsProvider`）
4. 渲染主页面（`HomeScreen`）
5. 自动获取当前位置天气

### 5.2 天气数据获取流程
1. 用户打开应用或刷新页面
2. `WeatherProvider` 调用 `LocationService` 获取位置
3. `WeatherProvider` 调用 `WeatherService` 获取天气数据
4. 解析API返回的JSON数据为 `WeatherModel` 对象
5. 更新UI显示天气信息

### 5.3 城市搜索流程
1. 用户点击搜索按钮
2. 导航到 `CitySearchScreen`
3. 用户输入城市名称或从列表选择城市
4. 返回选择的城市名称
5. `WeatherProvider` 根据城市名称获取天气数据

### 5.4 设置更改流程
1. 用户进入设置页面
2. 修改语言、更新频率或天气提醒设置
3. `SettingsProvider` 更新设置并通知监听者
4. 设置通过 `SharedPreferences` 持久化
5. UI根据新设置更新

### 5.5 广告与会员流程
1. 用户点击"获取7天高级会员"按钮
2. `AdService` 显示激励广告
3. 用户完整观看广告后获得奖励
4. `SettingsProvider` 更新会员状态
5. 会员状态通过 `SharedPreferences` 持久化

## 6. 性能优化建议

### 6.1 UI渲染优化
- 使用 `const` 构造函数减少不必要的重建
- 合理使用 `ListView.builder` 和 `GridView.builder` 处理长列表
- 使用 `AnimationController` 优化动画性能

### 6.2 网络请求优化
- 实现合理的缓存策略，避免频繁请求
- 根据用户设置的更新频率控制API调用频次
- 处理网络错误和超时情况

### 6.3 状态管理优化
- 避免不必要的状态更新
- 使用 `Consumer` 而非整个页面重建
- 合理划分状态范围，避免全局状态过多

### 6.4 内存优化
- 及时释放不再使用的资源
- 使用 `cached_network_image` 优化图片加载和缓存
- 避免内存泄漏，特别是在使用 `AnimationController` 时

## 7. 测试策略

### 7.1 单元测试
- 为核心业务逻辑编写单元测试
- 测试数据模型的解析和序列化
- 测试工具类的功能

### 7.2 Widget测试
- 测试关键UI组件的渲染和交互
- 测试页面导航和状态更新

### 7.3 集成测试
- 测试完整的用户流程
- 测试应用在不同网络条件下的表现

### 7.4 手动测试
- 在不同设备和屏幕尺寸上测试UI适配
- 测试国际化功能
- 测试位置权限和广告功能